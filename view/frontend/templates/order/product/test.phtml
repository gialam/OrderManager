<?php
/**
 * Copyright Â© 2015 Magenest. All rights reserved.
 * See COPYING.txt for license details.
 *
 * @category  Magenest
 */
?>
<script>
/**
* Created by Pham Quang Hau on 05/01/2016.
*/
define([ // jshint ignore:line
'jquery',
"underscore",
'Magento_Ui/js/form/form',
'ko',
'Magento_Ui/js/modal/modal',
'mage/translate',
'Magento_Checkout/js/model/totals',
'Magento_Checkout/js/model/quote'
], function (
$,
_,
Component,
ko,
modal,
$t,
totals,
quote
) {
'use strict';

var imageData = window.checkoutConfig.imageData;
var popUp = null;
var options = {
type: 'popup',
responsive: true,
innerScroll: true,
title: 'Select Wrapper'
};

var wrappers;
var wrapperCounter = 0;
var baseUrl;
var wrappable;
var quoteData = window.checkoutConfig.quoteData;

//noinspection JSUnusedLocalSymbols,JSUnusedLocalSymbols,JSUnusedLocalSymbols,JSUnusedLocalSymbols
return Component.extend({
defaults: {
template: 'Magenest_Wrapper/checkout/shipping/gift-wrapper'
},

isFormPopUpVisible: ko.observable(false),
wrapperArray: ko.observableArray(),
selectedWrapperArray: ko.observableArray(),
isSelectedWrapperVisible: ko.observable(false),
isChecked: ko.observable(false),
getItems: totals.getItems(),
isInboxChecked: ko.observable(false),
isOutboxChecked: ko.observable(false),
productArray: ko.observableArray(),
imageData: imageData,
isMessageVisible: ko.observable(true),
quoteId: quoteData.entity_id,

initialize: function () {
var self = this;
var i = 0;
this._super();
var wrapped = [];

baseUrl = BASE_URL; // jshint ignore:line

/** Get wrapper information */
var requestUrl = baseUrl.concat('wrapper/checkout/wraps');
$.ajax({
type: "POST",
url: requestUrl,
success: function (result){
wrappers = result;
},
async: false
});

while(i < wrappers.length){
self.wrapperArray.push(wrappers[i]);
i++;
}

this.isFormPopUpVisible.subscribe(function (value) {
if (value) {
self.getPopUp().openModal();
}
});

/** Get already wrapped wrappers */
var wrappedUrl = baseUrl.concat('wrapper/checkout/wrapped');
$.ajax({
type: "POST",
url: wrappedUrl,
data: {
quote_id: self.quoteId
},
success: function (result){
wrapped = result;
},
async: false
});

for(i = 0; i < wrapped.length; i++){
wrapped[i].onclick = self.deleteWrapper.bind(self);
wrapperCounter++;
self.selectedWrapperArray.push(wrapped[i]);
self.isSelectedWrapperVisible(true);
}

/** Get wrappable items from cart */
i = 0;
var itemUrl = baseUrl.concat('wrapper/checkout/items');
$.ajax({
type: "POST",
url: itemUrl,
data: {
quote_id: self.quoteId
},
success: function (result){
wrappable = result;
},
async: false
});

while(i < wrappable.length){
for(var j = 0; j < self.getItems().length; j++){
if(wrappable[i].item_id === self.getItems()[j].item_id){
var productObj = {};
productObj = {
item_id: self.getItems()[j].item_id,
item_name: self.getItems()[j].name,
imageSrc: self.imageData[self.getItems()[j].item_id]['src'], // jshint ignore:line
quantity: self.getItems()[j].qty,
options: []
};

// subtract the quantity of selected cart items from default quantity
for(var x = 0; x < wrapped.length; x++){
for(var y = 0; y < wrapped[x].qtyOptions.length; y++){
if(productObj.item_id === wrapped[x].qtyOptions[y].item_id){
productObj.quantity -= wrapped[x].qtyOptions[y].qty;
}
}
}

var productOptions = JSON.parse(self.getItems()[j].options);
if(productOptions.length > 0){
productObj.hasOptions = 1;
productObj.options = productOptions;
} else {
productObj.hasOptions = 0;
}

// Generate an array for cart item dropdown
productObj.qtyArray = ko.observableArray();
for(var k = 0; k <= productObj.quantity; k++){
productObj.qtyArray.push(k);
}
self.productArray.push(productObj);
}
}
i++;
}
},

/**
* Delete a wrapper from cart
*
* @param data
* @param event
*/
deleteWrapper: function(data, event){
var self = this;
var id = data.wrapper_id;
for(var i = 0; i < self.selectedWrapperArray().length; i++){
/** loop through the array of selected wrappers */
if(id === self.selectedWrapperArray()[i].wrapper_id){
for(var j = 0; j < self.selectedWrapperArray()[i].qtyOptions.length; j++){
/** loop through the array of products that has been chosen along with the wrapper */
for(var k = 0; k < self.productArray().length; k++){
/** loop through the array of products in cart */
if(self.selectedWrapperArray()[i].qtyOptions[j].item_id === self.productArray()[k].item_id){ // if item id of the 2 product matches
var a = parseInt(self.productArray()[k].quantity);
var b = parseInt(self.selectedWrapperArray()[i].qtyOptions[j].qty);

self.productArray()[k].quantity = a + b;
self.productArray()[k].qtyArray([]);

for(var m = 0; m <= self.productArray()[k].quantity; m++){
self.productArray()[k].qtyArray.push(m);
}
}
}
}

/** Send request to delete wrapper */
var deleteUrl = baseUrl.concat('wrapper/checkout/delete');
$.ajax({
type: "POST",
url: deleteUrl,
data: {
id: id
},
async: false
});

self.selectedWrapperArray.splice(i, 1);
}
}
},

/**
* Show popup dialog
*/
showFormPopUp : function () {
this.isFormPopUpVisible(true);
},

/**
* @returns {boolean}
*/
showInbox: function(){
return true;
},

/**
* @returns {boolean}
*/
showOutbox: function(){
return true;
},

/**
* @returns {*}
*/
getPopUp: function(){
var self = this;
if(!popUp) {
options.buttons =  [
{
text: $t('Cancel'),
class: 'action secondary action-hide-popup',
click: function () {
this.closeModal();
}
},
{
text: $t('Save Selection'),
class: 'action primary action-save-address',
click: self.saveSelectedWrapper.bind(self)
}
];

options.opened = function(){

};

options.closed = function(){
self.isFormPopUpVisible(false);
};

popUp = modal(options, $('*[data-mage-init="popup_modal"]'));

}
return popUp;
},

/**
* Save wrapper on clicking Save
*/
saveSelectedWrapper: function(){
var self = this;
var i = 0;
var selected = 0;
var product_selected = 0;
var message_selected = 0;

var obj = {};

var trElements = $('*[data-mage-init="wrapper_popup_table"]').find('tbody').find('tr');

$(trElements).each(function(index, element){
var radio = $(element).find('input');
if(radio.is(':checked')) {
obj = {
id: self.wrapperArray()[i].id,
name: self.wrapperArray()[i].name,
price: self.wrapperArray()[i].price,
image: self.wrapperArray()[i].image,
description: self.wrapperArray()[i].description,
wrapper_id: self.quoteId.concat(wrapperCounter),
onclick: self.deleteWrapper.bind(self)
};

i++;
selected = 1;
} else {
i++;
}
});

var messageTrElements = $('#').find('tbody').find('tr');

$(messageTrElements).each(function(index, element){
var checkbox = $(element).find('input');
if(checkbox.is(':checked')){
var textArea = $(element).find('textarea');
if(textArea.attr('name') === 'inboxTextArea'){
obj.inbox = textArea.val();
} else if(textArea.attr('name') === 'outboxTextArea') {
obj.outbox = textArea.val();
}
textArea.val('');
}
checkbox.prop('checked', false);
});

if(obj.outbox === undefined || obj.outbox.length === 0) {
obj.outbox = '';
} else {
message_selected++;
}
if(obj.inbox === undefined || obj.inbox.length === 0 ) {
obj.inbox = '';
} else {
message_selected++;
}

obj.isMessageVisible = message_selected !== 0;

if(selected === 0 && product_selected === 0)
{
window.alert('Please select a wrapper');
}
else if(selected === 1 && product_selected === 0){
product_selected++;
var itemTrElements = $($('*[data-mage-init="wrapper_popup_product_selection_table"]')).find('tbody').find('tr');

obj.qtyOptions = [];

$(itemTrElements).each(function(index, element){
var select = $(element).find('select');
var selectedItemId = select.attr('data-qty');
i = 0;
while(i < self.productArray().length){
if(selectedItemId === self.productArray()[i].item_id){
var fullName = self.productArray()[i].item_name;
for(var x = 0; x < self.productArray()[i].options.length; x++){
fullName += '-';
fullName += self.productArray()[i].options[x].value;
}
obj.qtyOptions.push(
{
item_id: self.productArray()[i].item_id,
item_name: self.productArray()[i].item_name,
qty: select.val(),
hasOptions: self.productArray()[i].hasOptions,
full_name: fullName
}
);
if(select.val() > 0) {
product_selected++;
}

// Generate a new array for cart item dropdown
self.productArray()[i].quantity -= select.val();
if(self.productArray()[i].quantity === 0) {
self.productArray()[i].isVisible = false;
}
self.productArray()[i].qtyArray([]);

for(var j = 0; j <= self.productArray()[i].quantity; j++){
self.productArray()[i].qtyArray.push(j);
}
}
i++;
}

});

if(selected === 1 && product_selected === 1) {
window.alert('Please choose at least 1 item in cart to wrap');
}
else if(selected === 1 && product_selected > 1) {
i = 0;
$(trElements).each(function(index, element){
var radio = $(element).find('input');
if(radio.is(':checked')){
radio.prop('checked', false);
}
i++;
});
self.selectedWrapperArray.push(obj);
wrapperCounter++;
this.getPopUp().closeModal();
self.isSelectedWrapperVisible(true);
self.isChecked(true);

/** Send request to add new item to cart */
var requestUrl = baseUrl.concat('wrapper/checkout/response');
$.ajax({
type: "POST",
url: requestUrl,
data: {
new_item: JSON.stringify(obj)
},
async: false
});
}
}
}
});
});
</script>
$("#save_content").click(function() {

var i = 0;
var obj = {};
var messageTrElements = $('#sampleTbl').find('tbody').find('tr');
$(messageTrElements).each(function (element, index) {
var checkbox = $(element).find('input');

if($("input[type='checkbox']").is(':checked'))
{
obj = {
id: this.wrapperArray()[i].productId_item,
//                        name: this.wrapperArray()[i].name,
//                        price: this.wrapperArray()[i].price,
//                        image: this.wrapperArray()[i].image,
//                        description: this.wrapperArray()[i].description,
//                        wrapper_id: this.quoteId.concat(wrapperCounter),
};
alert(obj);
}
//                if (checkbox.is(':checked')) {
//                    alert('123');
//                }
//                checkbox.prop('checked', false);
});

});



<script>

    function readTblValues()
    {
        var TableData = '';

        $('#tbTableValues').val('');    // clear textbox
        $('#sampleTbl tr').each(function(row, tr){
            TableData = TableData
                + $(tr).find('td:eq(0)').text() + ' '  // Task No.
                + $(tr).find('td:eq(1)').text() + ' '  // Date
                + $(tr).find('td:eq(2)').text() + ' '  // Description
                + $(tr).find('td:eq(3)').text() + ' '  // Task
                + '\n';
        });
        $('#tbTableValues').val(TableData);
    }

    function storeAndShowTableValues()
    {
        var TableData;
        TableData = storeTblValues();
        $('#tbTableValuesArray').val('TableData = \n' + print_r(TableData));
    }
    function storeTblValues()
    {
        var TableData = new Array();

        $('#sampleTbl tr').each(function(row, tr){
            TableData[row]={
                "taskNo" : $(tr).find('td:eq(0)').text()
                , "date" :$(tr).find('td:eq(1)').text()
                , "description" : $(tr).find('td:eq(2)').text()
                , "task" : $(tr).find('td:eq(3)').text()
            }
        });
        TableData.shift();  // first row will be empty - so remove
        return TableData;
    }

    function convertArrayToJSON()
    {
        var TableData;
        TableData = $.toJSON(storeTblValues());
        $('#tbConvertToJSON').val('JSON array: \n\n' + TableData.replace(/},/g, "},\n"));


    }
    function sendTblDataToServer()
    {
        var TableData;
        TableData = $.toJSON(storeTblValues());
        $('#tbSendTblDataToServer').val('JSON array to send to server: \n\n' + TableData.replace(/},/g, "},\n"));

        $.ajax({
            type: "POST",
            url: "//www.fourfront.us/resources/processJSONArray.php",
            data: "pTableData=" + TableData,

            success: function(msg){
                // return value stored in msg variable
                $('#tbServerResponse').val('Server Response:\n\n' + msg);
            }
        });
    }

    function print_r(arr,level) {
        var dumped_text = "";
        if(!level) level = 0;

        //The padding given at the beginning of the line.
        var level_padding = "";
        for(var j=0;j<level+1;j++) level_padding += "    ";

        if(typeof(arr) == 'object') { //Array/Hashes/Objects
            for(var item in arr) {
                var value = arr[item];

                if(typeof(value) == 'object') { //If it is an array,
                    dumped_text += level_padding + "'" + item + "' \n";
                    dumped_text += print_r(value,level+1);
                } else {
                    dumped_text += level_padding + "'" + item + "' => \"" + value + "\"\n";
                }
            }
        } else { //Stings/Chars/Numbers etc.
            dumped_text = "===>"+arr+"<===("+typeof(arr)+")";
        }
        return dumped_text;
    }
</script>
<input name="getTblValues" onclick="readTblValues();" value="Get Table Values" type="button">
<script type="text/javascript">
    //<![CDATA[
    function Pager(tableName, itemsPerPage) {
        this.tableName = tableName;
        this.itemsPerPage = itemsPerPage;
        this.currentPage = 1;
        this.pages = 0;
        this.inited = false;

        this.showRecords = function(from, to) {
            var rows = document.getElementById(tableName).rows;
            // i starts from 1 to skip table header row
            for (var i = 1; i < rows.length; i++) {
                if (i < from || i > to)
                    rows[i].style.display = 'none';
                else
                    rows[i].style.display = '';
            }
        }

        this.showPage = function(pageNumber) {
            if (! this.inited) {
                alert("not inited");
                return;
            }
            var oldPageAnchor = document.getElementById('pg'+this.currentPage);
            oldPageAnchor.className = 'pg-normal';

            this.currentPage = pageNumber;
            var newPageAnchor = document.getElementById('pg'+this.currentPage);
            newPageAnchor.className = 'pg-selected';

            var from = (pageNumber - 1) * itemsPerPage + 1;
            var to = from + itemsPerPage - 1;
            this.showRecords(from, to);
        }

        this.prev = function() {
            if (this.currentPage > 1)
                this.showPage(this.currentPage - 1);
        }

        this.next = function() {
            if (this.currentPage < this.pages) {
                this.showPage(this.currentPage + 1);
            }
        }

        this.init = function() {
            var rows = document.getElementById(tableName).rows;
            var records = (rows.length - 1);
            this.pages = Math.ceil(records / itemsPerPage);
            this.inited = true;
        }
        this.showPageNav = function(pagerName, positionId) {
            if (! this.inited) {
                alert("not inited");
                return;
            }
            var element = document.getElementById(positionId);

            var pagerHtml = '<span onclick="' + pagerName + '.prev();" class="pg-normal"> &#171 Prev </span> | ';
            for (var page = 1; page <= this.pages; page++)
                pagerHtml += '<span id="pg' + page + '" class="pg-normal" onclick="' + pagerName + '.showPage(' + page + ');">' + page + '</span> | ';
            pagerHtml += '<span onclick="'+pagerName+'.next();" class="pg-normal"> Next &#187;</span>';

            element.innerHTML = pagerHtml;
        }
    }
    //]]>
</script>
